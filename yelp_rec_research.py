# -*- coding: utf-8 -*-
"""Yelp_Rec_Research

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1IjwKlOhR0tCRCg86T-BDD2febWWnK9XO

# **Yelp Rec - Item Based Collaborative Filtering**
"""

import pandas as pd
import numpy as np
import itertools
from io import StringIO
import re

from google.colab import drive
drive.mount('/content/drive')

"""# **Importing Data**"""

business = []
with open('/content/drive/MyDrive/DataX/yelp_academic_dataset_business.json', 'r') as f:
    while True:
        lines = list(itertools.islice(f, 1000))
        if lines:
            lines_str = ''.join(lines)
            business.append(pd.read_json(StringIO(lines_str), lines=True))
        else:
            break
df_business = pd.concat(business)

user = []
with open('/content/drive/MyDrive/DataX/yelp_academic_dataset_user.json', 'r') as f:
    while True:
        lines = list(itertools.islice(f, 1000))
        if lines:
            lines_str = ''.join(lines)
            user.append(pd.read_json(StringIO(lines_str), lines=True))
        else:
            break
df_users = pd.concat(user)

review = []
with open('/content/drive/MyDrive/DataX/yelp_academic_dataset_review.json', 'r') as f:
    while True:
        lines = list(itertools.islice(f, 1000))
        if lines:
            lines_str = ''.join(lines)
            review.append(pd.read_json(StringIO(lines_str), lines=True))
        else:
            break
df_reviews = pd.concat(review)

"""# **Oregon and Count Filtering**"""

df_or = df_business[df_business['state'] == 'OR']
price_point = []
for attributes in df_or.attributes:
  if attributes == None:
    price_point.append(None)
  else:
    t_f = 'RestaurantsPriceRange2' in attributes
    if t_f:
      price = attributes['RestaurantsPriceRange2']
      if price == 'None':
        price_point.append(None)
      else:
        price = int(price)
        price_point.append(price)
    else:
      price_point.append(None)

restaurant_t_f = []
for categories in df_or.categories:
  if categories == None:
    restaurant_t_f.append(False)
  elif 'Restaurants' in categories: #or 'Food' in categories
    restaurant_t_f.append(True)
  else:
    restaurant_t_f.append(False)

df_or['Restaurant'] = restaurant_t_f

df_or['price_point'] = price_point
reviews_business = pd.merge(df_reviews, df_or, on = 'business_id')
counts = reviews_business['user_id'].value_counts()

reviews_business

sum_stars = {}

for i in range(len(reviews_business)):
  user = reviews_business.iloc[i, 1]
  stars = reviews_business.iloc[i, 3]
  if user in sum_stars.keys():
    curr_val = sum_stars[user]
    sum_stars[user] = curr_val + stars
  else:
    sum_stars[user] = stars

mean_stars = []

for user in reviews_business['user_id']:
  mean = sum_stars[user] / counts[user]
  mean_stars.append(mean)
  
reviews_business['normalized_stars'] = reviews_business['stars_x'] - mean_stars
reviews_business['mean_stars'] = mean_stars

user_reviews_business = reviews_business[reviews_business['user_id'].isin(counts.index[counts > 499])]

user_reviews_business[['stars_x', 'normalized_stars', 'mean_stars']].rename(columns = {'stars_x': 'stars'})

"""# **Ratings Matrix Normalized**"""

user_ratings = pd.pivot_table(user_reviews_business, values = 'stars_x', index = 'user_id', columns = ['business_id'])
user_ratings = user_ratings.dropna(thresh = 4, axis = 1)
user_ratings = user_ratings.fillna(0)

norm_user_ratings = pd.pivot_table(user_reviews_business, values = 'normalized_stars', index = 'user_id', columns = ['business_id'])
norm_user_ratings = norm_user_ratings.dropna(thresh = 4, axis = 1)
norm_user_ratings = norm_user_ratings.fillna(0)

user_ratings

norm_user_ratings

"""# **Cosine Similarity Matrix**"""

#def cosine_sim(r_i_norm, r_j_norm, r_i, r_j):
  #numerator = np.sum(r_i_norm * r_j_norm)
  #denom = np.sqrt(np.sum(r_i * r_i)) * np.sqrt(np.sum(r_j * r_j))
  #return (numerator / denom)

#Code obtained from: https://medium.com/analytics-vidhya/speed-up-cosine-similarity-computations-in-python-using-numba-c04bc0741750

from numba import jit
@jit(nopython=True)
def cosine_similarity(u_norm:np.ndarray, v_norm:np.ndarray, u:np.ndarray, v:np.ndarray):
    uv = 0
    uu = 0
    vv = 0
    for i in range(u_norm.shape[0]):
        uv += u_norm[i]*v_norm[i]
        uu += u[i]*u[i]
        vv += v[i]*v[i]
    cos_theta = 1
    if uu!=0 and vv!=0:
        cos_theta = uv/np.sqrt(uu*vv)
    return cos_theta

similarity_df = pd.DataFrame(columns = norm_user_ratings.columns, index = norm_user_ratings.columns)

norm_ratings_array = []
for i in range(len(norm_user_ratings.columns)):
  norm_ratings_array.append(norm_user_ratings.iloc[:, i].to_numpy())

ratings_array = []
for i in range(len(user_ratings.columns)):
  ratings_array.append(user_ratings.iloc[:, i].to_numpy())

for i in range(len(norm_user_ratings.columns)):
  for j in range(len(norm_user_ratings.columns)):
    similarity = cosine_similarity(norm_ratings_array[i], norm_ratings_array[j], ratings_array[i], ratings_array[j])
    similarity_df.iloc[i, j] = similarity

#norm_ratings_array = []
#for i in range(len(norm_user_ratings.columns)):
  #norm_ratings_array.append(norm_user_ratings.iloc[:, i].to_numpy())

#ratings_array = []
#for i in range(len(user_ratings.columns)):
  #ratings_array.append(user_ratings.iloc[:, i].to_numpy())

#similarity_matrix = []
#for i in range(len(norm_user_ratings.columns)):
  #corr = []
  #for j in range(len(norm_user_ratings.columns)):
    #similarity = cosine_similarity(norm_ratings_array[i], norm_ratings_array[j], ratings_array[i], ratings_array[j])
    #corr.append(similarity)
  #similarity_matrix.append(corr)

def top_similar(index, n_most_similar):
  most_similar = similarity_df.iloc[:, index].sort_values(ascending = False)
  top_n_similar = pd.DataFrame(index = np.arange(0, n_most_similar + 1, 1))
  top_n_similar['business_name'] = float("NaN")
  top_n_similar['business_categories'] = float("NaN")
  top_n_similar['business_stars'] = float("NaN")
  curr_bus = df_business[df_business['business_id'] == similarity_df.index[index]]
  top_n_similar.iloc[0, 0] = curr_bus['name'].item()
  top_n_similar.iloc[0, 1] = curr_bus['categories'].item()
  top_n_similar.iloc[0, 2] = curr_bus['stars'].item()
  j = 1
  for i in range(len(top_n_similar) - 1):
    if similarity_df.index[index] == most_similar.index[j - 1]:
      j += 1
    bus = df_business[df_business['business_id'] == most_similar.index[j - 1]]
    top_n_similar.iloc[i+1, 0] = bus['name'].item()
    top_n_similar.iloc[i+1, 1] = bus['categories'].item()
    top_n_similar.iloc[i+1, 2] = bus['stars'].item() 
    j += 1
  return top_n_similar

top_similar(0, 5)

similarity_df.iloc[:, 100:]

"""# **Prediction Score Weighting**"""

n_top = 8

rec_ratings = user_ratings.copy()
for i in range(len(user_ratings)):
  user = user_ratings.index[i]
  rated_places = user_ratings.columns[(user_ratings != 0).loc[user]]
  relevant_similarity = similarity_df.loc[similarity_df.index.isin(rated_places)]
  for j in range(len(user_ratings.columns)):
    if rec_ratings.iloc[i, j] != 0.0:
      rec_ratings.iloc[i, j] = -1
    else:
      business_scores = relevant_similarity.iloc[:, j]
      sorted_scores = business_scores.sort_values(ascending=False)
      score = 0
      total_weight = 0
      for k in range(n_top):
        weight = sorted_scores[k]
        business = sorted_scores.index[k]
        business_rating = user_ratings.loc[user, business]
        score += (weight * business_rating)
        total_weight += weight
      predicted_score = score / total_weight
      if predicted_score == 5.0:
        predicted_score = 4.834
      rec_ratings.iloc[i, j] = predicted_score

business_index = {}
i = 0
for business in user_ratings.columns:
  business_index[i] = business
  i += 1

#n_top = 5

#rec_ratings = user_ratings.copy()
#for i in range(len(user_ratings)):
  #user = user_ratings.index[i]
  #rated_places = user_ratings.columns[(user_ratings != 0).loc[user]]
  #relevant_similarity_index = [user_ratings.columns.get_loc(x) for x in rated_places]
  #for j in range(len(user_ratings.columns)):
    #if rec_ratings.iloc[i, j] != 0.0:
      #rec_ratings.iloc[i, j] = -1
    #else:
      #business_scores = similarity_matrix[j]
      #actual_index = {}
      #for index in relevant_similarity_index:
        #actual_index[business_scores[index]] = index
      #rel_business_scores = list(actual_index.keys())
      #sorted_scores = sorted(rel_business_scores, reverse = True)
      #if n_top > len(sorted_scores):
        #n_top = len(sorted_scores)
      #score = 0.000000000001
      #total_weight = 0.000000000001
      #for k in range(n_top):
        #if sorted_scores[k] > 0:
          #weight = sorted_scores[k]
          #business = business_index[actual_index[weight]]
          #business_rating = user_ratings.loc[user, business]
          #score += (weight * business_rating)
          #total_weight += weight
      #predicted_score = score / total_weight
      #rec_ratings.iloc[i, j] = predicted_score

rec_ratings

rec_ratings.to_csv('BC_ratings_99.csv')
!cp BC_ratings_99.csv "drive/My Drive/"

"""# **Recommendations**"""

businesses = rec_ratings.idxmax(axis=1)
scores_table = pd.DataFrame(index = businesses.index)
scores_table['business_id'] = businesses
scores_table['normalized_score'] = float("NaN")
for i in range(len(scores_table)):
  user = scores_table.index[i]
  business = scores_table['business_id'][i]
  mean_stars = sum_stars[user] / counts[user] 
  scores_table.iloc[i, 1] = rec_ratings.loc[user, business] - mean_stars

scores_table

def recommend(top_businesses):
  recommendations = pd.DataFrame(index = top_businesses.index)
  recommendations["User's_name"] = float("NaN")
  recommendations['business_name'] = float("NaN")
  recommendations['business_categories'] = float("NaN")
  recommendations['business_stars'] = float("NaN")
  recommendations['price_point'] = float("NaN")
  #recommendations['predicted_score'] = float("NaN")
  for i in range(len(recommendations)):
    user = recommendations.index[i]
    business = top_businesses[i]
    recommendations.iloc[i, 0] = df_users[df_users['user_id'] == user]['name'].item()
    recommendations.iloc[i, 1] = df_or[df_or['business_id'] == business]['name'].item()
    recommendations.iloc[i, 2] = df_or[df_or['business_id'] == business]['categories'].item()
    recommendations.iloc[i, 3] = df_or[df_or['business_id'] == business]['stars'].item()
    recommendations.iloc[i, 4] = df_or[df_or['business_id'] == business]['price_point'].item()
    #recommendations.iloc[i, 5] = rec_ratings.loc[user, business]
  return recommendations

recommend(businesses)

"""# **Recommendations Through Preferences**"""

#Restaurants Only
df_restaurants = df_or[df_or['Restaurant'] == True]
restaurants = [business for business in rec_ratings.columns if business in list(df_restaurants['business_id'])]
restaurant_recs = rec_ratings[restaurants]
top_restaurants = restaurant_recs.idxmax(axis=1)
recommend(top_restaurants)

#Four stars and above
four_stars_above = df_or[df_or['stars'] >= 4.0]
highly_rated = [business for business in rec_ratings.columns if business in list(four_stars_above['business_id'])]
highly_rated_recs = rec_ratings[highly_rated]
high_rated = highly_rated_recs.idxmax(axis=1)
recommend(high_rated)

#Price Point

low_price_point = df_or[df_or['price_point'] == 1]
cheap_businesses = [business for business in rec_ratings.columns if business in list(low_price_point['business_id'])]
cheap_recs = rec_ratings[cheap_businesses]
cheap_business = cheap_recs.idxmax(axis=1)
recommend(cheap_business)

def restaurant_filter(restaurant=False, stars=None, price_point=None):
  temp_table = df_or.copy()
  if restaurant:
    temp_table = temp_table[temp_table['Restaurant'] == True]
  if stars != None:
    temp_table = temp_table[temp_table['stars'] >= stars]
  if price_point != None:
    temp_table = temp_table[temp_table['price_point'] == price_point]
  chosen_businesses = [business for business in rec_ratings.columns if business in list(temp_table['business_id'])]
  business_ratings = rec_ratings[chosen_businesses]
  best_businesses = business_ratings.idxmax(axis=1)
  to_return = recommend(best_businesses)
  #pd.set_option("display.max_rows", None, "display.max_columns", None)
  return to_return

restaurant_filter(True, 3, 2)

def restaurant_filter_user(user, restaurant=False, stars=None, price_point=None):
  temp_table = df_or.copy()
  if restaurant:
    temp_table = temp_table[temp_table['Restaurant'] == True]
  if stars != None:
    temp_table = temp_table[temp_table['stars'] >= stars]
  if price_point != None:
    temp_table = temp_table[temp_table['price_point'] == price_point]
  chosen_businesses = [business for business in rec_ratings.columns if business in list(temp_table['business_id'])]
  business_ratings = rec_ratings[chosen_businesses]
  best_businesses = business_ratings[business_ratings.index == user].idxmax(axis=1)
  to_return = recommend(best_businesses)
  #pd.set_option("display.max_rows", None, "display.max_columns", None)
  return to_return

restaurant_filter_user('zZ_wSncgj11otB8KkMl3Ow', True, 3, 1)

restaurant_filter_user('0-mKNvwasvI1CC13QT4Z-w', True, 4, 2)